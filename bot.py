# –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from telegram import Update
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    ContextTypes,
    CommandHandler,
)
import os
import logging
import json
from dotenv import load_dotenv
from collections import defaultdict
from pathlib import Path
import sys
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram import BotCommand, BotCommandScopeDefault, MenuButtonCommands
import random

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ –º–æ–¥—É–ª–∏
from llm_integration import generate_yandexgpt_response
from utils import *
from contact_manager import contact_manager

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setLevel(logging.DEBUG)
console_formatter = logging.Formatter(
    "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
console_handler.setFormatter(console_formatter)

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
file_handler = logging.FileHandler("bot.log", mode="w")
file_handler.setLevel(logging.DEBUG)
file_formatter = logging.Formatter(
    "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
file_handler.setFormatter(file_formatter)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –ª–æ–≥–≥–µ—Ä—É
logger.addHandler(console_handler)
logger.addHandler(file_handler)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    exit(1)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
database = None
all_objects_summary = None

SYSTEM_PROMPT = """
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –¢–≤–æ–∏ –ø—Ä–∞–≤–∏–ª–∞:
0. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—á–∏–≤—ã–º. –°—Ç–∞—Ä–∞–π—Å—è –æ—Ç–≤–µ—á–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞, —Ö–æ—Ç—è –±—ã 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ (–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞ "–£ –º–µ–Ω—è –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É")
1. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ö–û–ù–¢–ï–ö–°–¢–ê –∏ –í–°–ï–ô –ë–ê–ó–´ –û–ë–™–ï–ö–¢–û–í
2. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç - –≥–æ–≤–æ—Ä–∏ "–£ –º–µ–Ω—è –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É"
3. –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
4. –î–ª—è –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π –≤—Å—é –±–∞–∑—É –æ–±—ä–µ–∫—Ç–æ–≤
5. –°–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:
   - –ü—Ä–µ–¥–ª–∞–≥–∞–π —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–º–æ–≥ –∫–ª–∏–µ–Ω—Ç—É. –ù–µ –∑–¥–æ—Ä–æ–≤–∞–π—Å—è, –∫–æ–≥–¥–∞ —Å–æ–±–∏—Ä–∞–µ—à—å –∫–æ–Ω—Ç–∞–∫—Ç, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ!
   - –ò—Å–ø–æ–ª—å–∑—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã: 
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–≥—É –ø—Ä–∏—Å–ª–∞—Ç—å –ø–æ–¥–±–æ—Ä–∫—É –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ - –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã - –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã, —è —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏"
        "–ú–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä - –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç –∏ –Ω–∞ –∫–∞–∫–æ–π –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å?"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–≥—É –ø—Ä–∏—Å–ª–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é - –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω?"
   - –ï—Å–ª–∏ –∏–º—è —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ, —É—Ç–æ—á–Ω–∏ –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–π —Ç–æ–ª—å–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω
    - –ü–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ô –§–õ–ê–ì collecting_contacts
   - –ï—Å–ª–∏ –∏–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –≤–µ–∂–ª–∏–≤–æ –ø–æ–ø—Ä–æ—Å–∏ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω
   - –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –Ω–∞—Å—Ç–∞–∏–≤–∞–π
   - –Ω–µ –ø–∏—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ collecting_contacts
    - –ü–†–ï–î–õ–ê–ì–ê–ô –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó –∑–∞ —Å–µ—Å—Å–∏—é
   - –ï–°–õ–ò –ö–û–ù–¢–ê–ö–¢ –£–ñ–ï –°–û–•–†–ê–ù–ï–ù (contact_saved=True) - –ù–ï –ü–†–ï–î–õ–ê–ì–ê–ô –°–ù–û–í–ê
   - –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ü–ï–†–ï–°–¢–ê–ù–¨ –£–ü–û–ú–ò–ù–ê–¢–¨ –≠–¢–£ –¢–ï–ú–£
   - –ü–µ—Ä–µ–∫–ª—é—á–∞–π—Å—è –Ω–∞ –¥—Ä—É–≥–∏–µ —Ç–µ–º—ã: –ø–æ–¥–±–æ—Ä –æ–±—ä–µ–∫—Ç–æ–≤, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ, –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
6. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –ø–æ–ª–µ–∑–Ω—ã–º –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—á–∏–≤—ã–º
7. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –¥–∏–∞–ª–æ–≥, –∑–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
8. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤:
   - –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô markdown (**–∂–∏—Ä–Ω—ã–π**, __–∫—É—Ä—Å–∏–≤__)
   - –ü–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–º, –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º
   - –†–∞–∑–±–∏–≤–∞–π –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∞–±–∑–∞—Ü—ã, –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –ø–∏—à–∏ —Å–ª–æ–≤–∞ "–∑–∞–∫–ª—é—á–µ–Ω–∏–µ", "–≤–≤–µ–¥–µ–Ω–∏–µ" –∏ —Ç.–¥.
9. –û–±—Ä–∞—â–∞–π—Å—è –∫ –∫–ª–∏–µ–Ω—Ç—É –ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ: {user_name}
10. –ù–ò–ö–û–ì–î–ê –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ä–µ–ø–ª–∏–∫–∏ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –æ—Ç —Å–≤–æ–µ–≥–æ –ª–∏—Ü–∞.
11. –ù–ï –ü–†–ï–î–ü–û–õ–ê–ì–ê–ô –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –∏ –∂–¥–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
"""


def load_database():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
    global database
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        current_dir = Path(__file__).resolve().parent
        db_path = current_dir / "data" / "database.json"

        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑: {db_path}")

        if not db_path.exists():
            logger.error(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {db_path}")
            return None

        with open(db_path, "r", encoding="utf-8") as f:
            database = json.load(f)
            logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –û–±—ä–µ–∫—Ç–æ–≤: {len(database)}")
            return database

    except json.JSONDecodeError as e:
        logger.exception("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return None
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None


# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_database()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    current_dir = Path(__file__).parent
    image_path = current_dir / "images" / "logo.jpg"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    welcome_text = (
        "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –°—Ç—Ä–æ–π–ò–Ω–≤–µ—Å—Ç!\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ –∂–∏–ª—å–µ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if image_path.exists():
        with open(image_path, "rb") as photo:
            await update.message.reply_photo(
                photo=photo,
                caption=welcome_text,
                reply_markup=ReplyKeyboardMarkup(
                    [["–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ"]], resize_keyboard=True, one_time_keyboard=True
                ),
            )
    else:
        logger.warning(f"–§–∞–π–ª –ª–æ–≥–æ—Ç–∏–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        await update.message.reply_text(
            welcome_text,
            reply_markup=ReplyKeyboardMarkup(
                [["–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ"]], resize_keyboard=True, one_time_keyboard=True
            ),
        )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()


async def handle_first_message(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞"""
    await update.message.reply_text(
        "üëã –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?",
        reply_markup=ReplyKeyboardRemove(),
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
    context.user_data["expecting_name"] = True


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        user_id = update.message.from_user.id
        user_text = update.message.text
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_text}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        reset_commands = ["/start", "/menu", "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"]
        if user_text.lower() in reset_commands:
            context.user_data.pop("collecting_contacts", None)
            await show_main_menu(update, context)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
        if context.user_data.get("expecting_name"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            extracted_name = extract_name(user_text)

            if len(extracted_name.split()) > 2:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∏–º—è, –Ω–æ –ø—Ä–æ—Å–∏–º —É—Ç–æ—á–Ω–∏—Ç—å
                context.user_data["temp_name"] = extracted_name
                await update.message.reply_text(
                    f"–ü–æ–Ω—è–ª –≤–∞—Å –∫–∞–∫ '{extracted_name}'. –≠—Ç–æ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è? "
                    "–ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∏–º—è, —á—Ç–æ–±—ã –º–Ω–µ –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è üòä"
                )
                context.user_data["confirming_name"] = True
                return

            if context.user_data.get("confirming_name"):
                if user_text.lower() in ["–¥–∞", "yes", "–≤–µ—Ä–Ω–æ"]:
                    name = context.user_data["temp_name"]
                else:
                    name = extract_name(user_text)

                context.user_data["user_name"] = name
                context.user_data["confirming_name"] = False
                context.user_data["expecting_name"] = False
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è –∫–∞–∫: {name}")

                await update.message.reply_text(
                    f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! üòä\n"
                    "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ –Ω–∞—à–∏—Ö –∂–∏–ª—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–∞—Ö, "
                    "—É—Å–ª–æ–≤–∏—è—Ö –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç."
                )
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
                await show_main_menu(update, context)
                return
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.user_data["user_name"] = extracted_name
                context.user_data["expecting_name"] = False
                logger.info(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è –∫–∞–∫: {extracted_name}"
                )

                await update.message.reply_text(
                    f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {extracted_name}! üòä\n"
                    "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ –Ω–∞—à–∏—Ö –∂–∏–ª—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–∞—Ö, "
                    "—É—Å–ª–æ–≤–∏—è—Ö –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç."
                )
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
                await show_main_menu(update, context)
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        if context.user_data.get("awaiting_comparison"):
            try:
                # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ –∑–∞–ø—è—Ç–æ–π
                complexes = [
                    name.strip() for name in user_text.split(",") if name.strip()
                ]

                if not complexes:
                    await update.message.reply_text(
                        "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ñ–ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                    )
                    return

                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                comparison_result = compare_complexes(complexes, database)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await update.message.reply_text(comparison_result)

                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                await update.message.reply_text(
                    "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–∫–æ–º-—Ç–æ –∏–∑ –ñ–ö? –ò–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä?",
                    reply_markup=ReplyKeyboardMarkup(
                        [
                            ["–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ñ–ö", "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä"],
                            ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
                        ],
                        resize_keyboard=True,
                    ),
                )

            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ñ–ö: {e}")
                await update.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
                )
            finally:
                context.user_data["awaiting_comparison"] = False
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        if context.user_data.get("collecting_contacts"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            contact_info = extract_contact_info(user_text)

            if contact_info:
                name, phone = contact_info
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: {name}, {phone}")

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
                dialog_context = " | ".join(
                    [msg["text"] for msg in context.user_data.get("history", [])[-3:]]
                )
                logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞: {dialog_context}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
                if contact_manager.save_contact(
                    user_id=user_id, name=name, phone=phone, context=dialog_context
                ):
                    logger.info("–ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")

                    # –û–ß–ò–©–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –°–ë–û–†–ê –ö–û–ù–¢–ê–ö–¢–û–í
                    context.user_data["collecting_contacts"] = False

                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
                    context.user_data["contact_saved"] = True
                    context.user_data["collecting_contacts"] = False

                    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                    clean_history = [
                        msg
                        for msg in context.user_data["history"]
                        if "–∫–æ–Ω—Ç–∞–∫—Ç—ã" not in msg["text"].lower()
                        and "—Ç–µ–ª–µ—Ñ–æ–Ω" not in msg["text"].lower()
                        and "–ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å" not in msg["text"].lower()
                    ]
                    context.user_data["history"] = clean_history[
                        -10:
                    ]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π

                    await update.message.reply_text(
                        f"–°–ø–∞—Å–∏–±–æ, {name}! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. üòä"
                    )

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    await show_main_menu(update, context)
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç!")
                    await update.message.reply_text(
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. "
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    )
                    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            else:
                await update.message.reply_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "
                    '"–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ +79161234567"'
                )
            return  # –í–ê–ñ–ù–û: –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if user_text == "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ñ–ö":
            all_objects = list(database.keys())
            response = "üè† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∏–ª—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã:\n" + "\n".join(
                [f"‚Ä¢ {name}" for name in all_objects]
            )
            await update.message.reply_text(response)
            return

        elif user_text == "–°—Ä–∞–≤–Ω–∏—Ç—å –ñ–ö":
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ñ–ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –ñ–ö –°–æ–ª–Ω–µ—á–Ω—ã–π, –ñ–ö –õ—É–≥–æ–≤–æ–π"
            )
            context.user_data["awaiting_comparison"] = True
            return

        elif user_text == "–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã":
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "
                "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ +79161234567"
            )
            context.user_data["collecting_contacts"] = True
            return

        elif user_text == "–ü–æ–º–æ—â—å":
            await help_command(update, context)
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if "history" not in context.user_data:
            context.user_data["history"] = []
            context.user_data["object_context"] = ""
            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        user_name = context.user_data.get("user_name", "–∫–ª–∏–µ–Ω—Ç")
        personalized_prompt = SYSTEM_PROMPT.format(user_name=user_name)

        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        object_data = find_object_in_db(user_text, database)
        if object_data:
            context.user_data["object_context"] = format_context(object_data, database)
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—ä–µ–∫—Ç–∞")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è GPT
        messages = [{"role": "system", "text": personalized_prompt}]

        # 0. –§–ª–∞–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        if context.user_data.get("contact_saved"):
            messages.append(
                {
                    "role": "system",
                    "text": "–í–ê–ñ–ù–û: –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å–Ω–æ–≤–∞.",
                }
            )

        # 1. –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        messages.append({"role": "system", "text": SYSTEM_PROMPT})

        # 2. –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—ä–µ–∫—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if context.user_data["object_context"]:
            messages.append(
                {
                    "role": "system",
                    "text": f"–¢–ï–ö–£–©–ò–ô –ö–û–ù–¢–ï–ö–°–¢ –û–ë–™–ï–ö–¢–ê:\n{context.user_data['object_context']}",
                }
            )

        # 3. –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–∞–º
        global all_objects_summary
        if not all_objects_summary:
            all_objects_summary = generate_all_objects_summary(database)
        messages.append(
            {
                "role": "system",
                "text": f"–í–°–Ø –ë–ê–ó–ê –û–ë–™–ï–ö–¢–û–í (–∫—Ä–∞—Ç–∫–æ):\n{all_objects_summary}",
            }
        )

        # 4. –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        for msg in context.user_data["history"]:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if msg["role"] == "user":
                messages.append({"role": "user", "text": msg["text"]})
            # –î–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å –ø–æ–º–µ—Ç–∫–æ–π
            elif msg["role"] == "assistant":
                messages.append(
                    {"role": "assistant", "text": f"[–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: {msg['text']}"}
                )

        # 5. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "text": user_text})

        # 6. –í–∞–∂–Ω—ã–µ —É–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏
        messages.append(
            {
                "role": "system",
                "text": "–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–µ –ø—ã—Ç–∞–π—Å—è –ø—Ä–µ–¥—É–≥–∞–¥—ã–≤–∞—Ç—å –µ–≥–æ –æ—Ç–≤–µ—Ç—ã.",
            }
        )
        messages.append(
            {
                "role": "system",
                "text": "–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–º. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ø–æ—Å–ª–µ.",
            }
        )

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è GPT")
        logger.debug(f"–ü–µ—Ä–≤—ã–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è:")
        for i, msg in enumerate(messages[:3]):
            logger.debug(f"  {i}. {msg['role']}: {msg['text'][:100]}...")

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT
        logger.info("–í—ã–∑–æ–≤ generate_yandexgpt_response")
        response_text = generate_yandexgpt_response(messages)
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç YandexGPT: {response_text}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        if any(
            phrase in response_text.lower()
            for phrase in [
                "–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã",
                "–æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω",
                "–∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç",
                "–Ω–æ–º–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å",
            ]
        ):
            context.user_data["collecting_contacts"] = True
            logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ collecting_contacts")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        context.user_data["history"].append(
            {"role": "assistant", "text": response_text}
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        context.user_data["history"].append({"role": "user", "text": user_text})

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
        MAX_HISTORY_LENGTH = 10
        context.user_data["history"] = context.user_data["history"][
            -MAX_HISTORY_LENGTH:
        ]
        logger.debug(
            f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–∞ –¥–æ {len(context.user_data['history'])} —Å–æ–æ–±—â–µ–Ω–∏–π"
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è Telegram
        clean_response = clean_telegram_text(response_text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(clean_response)
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
        try:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as send_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {send_error}")


def extract_contact_info(text: str) -> tuple:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    clean_text = "".join(filter(lambda x: x not in '",;', text))

    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø—Ä–æ–±–µ–ª—É
    parts = clean_text.rsplit(maxsplit=1)

    if len(parts) < 2:
        return None

    name_part = parts[0].strip()
    phone_part = parts[1].strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å —Ü–∏—Ñ—Ä—ã
    if any(char.isdigit() for char in phone_part):
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –≤ –Ω–æ–º–µ—Ä–µ
        phone_clean = "".join(filter(str.isdigit, phone_part))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–æ–º–µ—Ä–∞ (–º–∏–Ω–∏–º—É–º 6 —Ü–∏—Ñ—Ä)
        if len(phone_clean) >= 6:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä, –µ—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏–ª–∏ 8
            if phone_clean.startswith("8") and len(phone_clean) == 11:
                phone_clean = "7" + phone_clean[1:]
            elif phone_clean.startswith("7") and len(phone_clean) == 11:
                pass  # –£–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            elif len(phone_clean) == 10:
                phone_clean = "7" + phone_clean

            return name_part, phone_clean

    return None


def clean_telegram_text(text: str) -> str:
    # –£–¥–∞–ª—è–µ–º —Ñ—Ä–∞–∑—ã –æ —Å–±–æ—Ä–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    if "–∫–æ–Ω—Ç–∞–∫—Ç—ã" in text.lower() or "—Ç–µ–ª–µ—Ñ–æ–Ω" in text.lower():
        phrases_to_remove = [
            "–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã",
            "–æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω",
            "–∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç",
            "–Ω–æ–º–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å",
            "–∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å",
            "–¥–ª—è —Å–≤—è–∑–∏",
        ]
        for phrase in phrases_to_remove:
            text = text.replace(phrase, "")

    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç markdown –∏ —É–ª—É—á—à–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram"""
    # –£–±–∏—Ä–∞–µ–º markdown –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    text = text.replace("**", "").replace("__", "").replace("\\", "")
    # –£–¥–∞–ª—è–µ–º –º–µ—Ç–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = text.replace("[–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]:", "").replace("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", "")

    # –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤
    text = text.replace("‚Ä¢", "‚Ä¢")
    text = text.replace("- ", "‚Ä¢ ")

    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = text.replace("\n\n", "\n")

    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–æ
    if not text.startswith(("üëã", "üè†", "üìû", "‚ÑπÔ∏è", "üîç")):
        emojis = ["üè†", "üåü", "‚ú®", "üí°", "üìå", "üîé"]
        text = random.choice(emojis) + " " + text

    return text


async def reset_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
    context.user_data.clear()
    await update.message.reply_text(
        "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ!", reply_markup=ReplyKeyboardRemove()
    )
    await start(update, context)


def extract_name(text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞
    lower_text = text.lower()

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–º—è
    patterns = ["–º–µ–Ω—è –∑–æ–≤—É—Ç", "–∑–æ–≤—É—Ç", "–º–æ–µ –∏–º—è", "–∏–º—è", "–Ø", "—ç—Ç–æ"]

    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ
    for pattern in patterns:
        if pattern in lower_text:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            start_index = lower_text.index(pattern) + len(pattern)
            name_part = text[start_index:].strip()

            # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            if name_part and name_part[0] in [",", ":", "-", "."]:
                name_part = name_part[1:].strip()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ (–∏–ª–∏ –ø–µ—Ä–≤—ã–µ 2 —Å–ª–æ–≤–∞ –¥–ª—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –∏–º–µ–Ω)
            parts = name_part.split()
            if len(parts) > 0:
                # –ë–µ—Ä–µ–º –Ω–µ –±–æ–ª–µ–µ 2 —Å–ª–æ–≤ (–¥–ª—è –∏–º–µ–Ω–∏+—Ñ–∞–º–∏–ª–∏–∏)
                return " ".join(parts[:2]).title()

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç (–æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π)
    return text[:30].strip().title()


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ –∂–∏–ª—å—ë!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –°–ø—Ä–æ—Å–∏—Ç—å –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ñ–ö\n"
        "- –ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç\n"
        "- –°—Ä–∞–≤–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ñ–ö\n"
        "- –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏"
    )
    await update.message.reply_text(help_text)


async def setup_commands(application: Application) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –¥–ª—è –±–æ—Ç–∞"""
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("help", "–ü–æ–º–æ—â—å –∏ —Å–ø—Ä–∞–≤–∫–∞"),
        BotCommand("menu", "–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    ]
    await application.bot.set_my_commands(commands, scope=BotCommandScopeDefault())
    await application.bot.set_chat_menu_button(menu_button=MenuButtonCommands())


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    menu_keyboard = [
        ["–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ñ–ö", "–°—Ä–∞–≤–Ω–∏—Ç—å –ñ–ö"],
        ["–ü–æ–º–æ—â—å", "–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã"],
    ]
    await update.message.reply_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=ReplyKeyboardMarkup(menu_keyboard, resize_keyboard=True),
    )


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –°–æ–∑–¥–∞–µ–º Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    try:
        # –°–æ–∑–¥–∞–µ–º Application —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Builder
        builder = Application.builder().token(TELEGRAM_TOKEN)

        # –î–æ–±–∞–≤–ª—è–µ–º post_init –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        builder = builder.post_init(setup_commands)

        application = builder.build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("menu", show_main_menu))
        application.add_handler(CommandHandler("reset", reset_bot))
        application.add_handler(
            MessageHandler(filters.Regex(r"^–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ$"), handle_first_message)
        )
        application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")


if __name__ == "__main__":
    main()

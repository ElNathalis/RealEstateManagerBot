import json
import logging
from pathlib import Path

logger = logging.getLogger(__name__)


def format_context(object_data: dict, full_database: dict) -> str:
    try:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—ä–µ–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
        if object_data.get("special_type") == "auto_search":
            text = "===== –ù–ê–ô–î–ï–ù–ù–´–ï –û–ë–™–ï–ö–¢–´ =====\n"
            for obj_name in object_data["objects"]:
                obj = full_database[obj_name]
                text += f"‚Ä¢ {obj_name}:\n"
                text += f"  –û–ø–∏—Å–∞–Ω–∏–µ: {obj['–æ–ø–∏—Å–∞–Ω–∏–µ'][:100]}...\n"
                text += f"  –°—Ä–æ–∫ —Å–¥–∞—á–∏: {obj['—Å—Ä–æ–∫_—Å–¥–∞—á–∏']}\n"
                if "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏" in obj:
                    text += f"  –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {', '.join(obj['–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏'][:3])}\n"
                text += "\n"
            return text

        # –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ñ–ö
        if object_data.get("special_type") == "all_objects":
            text = "===== –í–°–ï –î–û–°–¢–£–ü–ù–´–ï –ñ–ö =====\n"
            for obj_name in object_data["objects"]:
                text += f"- {obj_name}\n"
            return text + "\n"

        # –ó–∞–ø—Ä–æ—Å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        if object_data.get("special_type") == "compare":
            text = "===== –°–†–ê–í–ù–ï–ù–ò–ï –û–ë–™–ï–ö–¢–û–í =====\n"
            for obj_name in object_data["objects"]:
                obj = full_database[obj_name]
                text += f"‚Ä¢ {obj_name}:\n"
                text += f"  –û–ø–∏—Å–∞–Ω–∏–µ: {obj['–æ–ø–∏—Å–∞–Ω–∏–µ'][:100]}...\n"
                text += f"  –≠—Ç–∞–∂–Ω–æ—Å—Ç—å: {obj['—ç—Ç–∞–∂–Ω–æ—Å—Ç—å']}\n"
                text += f"  –°—Ä–æ–∫ —Å–¥–∞—á–∏: {obj['—Å—Ä–æ–∫_—Å–¥–∞—á–∏']}\n"
                if "–±–ª–∏–∂–∞–π—à–∏–µ_–æ–±—ä–µ–∫—Ç—ã" in obj:
                    text += f"  –†—è–¥–æ–º: {', '.join([n['–Ω–∞–∑–≤–∞–Ω–∏–µ'] for n in obj['–±–ª–∏–∂–∞–π—à–∏–µ_–æ–±—ä–µ–∫—Ç—ã'][:2]])}\n"
                text += "\n"
            return text

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        text = f"===== {object_data['–Ω–∞–∑–≤–∞–Ω–∏–µ']} =====\n"
        text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {object_data['–æ–ø–∏—Å–∞–Ω–∏–µ']}\n"
        text += f"–≠—Ç–∞–∂–Ω–æ—Å—Ç—å: {object_data['—ç—Ç–∞–∂–Ω–æ—Å—Ç—å']}\n"
        text += f"–°—Ä–æ–∫ —Å–¥–∞—á–∏: {object_data['—Å—Ä–æ–∫_—Å–¥–∞—á–∏']}\n\n"
        text += "–ë–ª–∏–∂–∞–π—à–∏–µ –æ–±—ä–µ–∫—Ç—ã:\n"
        for obj in object_data["–±–ª–∏–∂–∞–π—à–∏–µ_–æ–±—ä–µ–∫—Ç—ã"]:
            text += f"- {obj['–Ω–∞–∑–≤–∞–Ω–∏–µ']} ({obj['—Ç–∏–ø']}, {obj['—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ']})\n"
        return text

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        return ""


def find_object_in_db(user_query: str, db: dict) -> dict:
    """–ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    try:
        if not db:
            logger.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return None

        normalized_query = user_query.lower()
        matches = []

        # 1. –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ñ–ö
        if any(
            phrase in normalized_query
            for phrase in [
                "–∫–∞–∫–∏–µ –∂–∫ –¥–æ—Å—Ç—É–ø–Ω—ã",
                "—Å–ø–∏—Å–æ–∫ –∂–∫",
                "–ø–µ—Ä–µ—á–∏—Å–ª–∏ –∂–∫",
                "–≤–∞—à–∏ –æ–±—ä–µ–∫—Ç—ã",
            ]
        ):
            return {"special_type": "all_objects", "objects": list(db.keys())}

        # 2. –ó–∞–ø—Ä–æ—Å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        if "—Å—Ä–∞–≤–Ω–∏" in normalized_query or "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ" in normalized_query:
            objects_to_compare = []
            for obj_name in db.keys():
                if obj_name.lower() in normalized_query:
                    objects_to_compare.append(obj_name)

            if len(objects_to_compare) >= 2:
                return {"special_type": "compare", "objects": objects_to_compare}

        # 1. –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        for obj_name, obj_data in db.items():
            if obj_name.lower() == normalized_query:
                return {"–Ω–∞–∑–≤–∞–Ω–∏–µ": obj_name, **obj_data}

        # –ü–æ—Å–ª–µ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–∏–º:
        for obj_name, obj_data in db.items():
            if normalized_query in obj_name.lower():
                return {"–Ω–∞–∑–≤–∞–Ω–∏–µ": obj_name, **obj_data}

        # –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π:
        name_mapping = {"—Å–æ–ª–Ω–µ—á": "–ñ–ö –°–æ–ª–Ω–µ—á–Ω—ã–π", "–ª—É–≥": "–ñ–ö –õ—É–≥–æ–≤–æ–π"}

        for short, full in name_mapping.items():
            if short in normalized_query:
                return {"–Ω–∞–∑–≤–∞–Ω–∏–µ": full, **db[full]}

        # 2. –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        for obj_name, obj_data in db.items():
            if obj_name.lower() in normalized_query:
                return {"–Ω–∞–∑–≤–∞–Ω–∏–µ": obj_name, **obj_data}

        # 3. –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        keywords = ["—Å–æ–ª–Ω–µ—á–Ω—ã–π", "–ª—É–≥–æ–≤–æ–π", "—Å—Ç—Ä–æ–π–∏–Ω–≤–µ—Å—Ç", "–∂–∫"]
        for keyword in keywords:
            if keyword in normalized_query:
                for obj_name, obj_data in db.items():
                    if keyword in obj_name.lower():
                        return {"–Ω–∞–∑–≤–∞–Ω–∏–µ": obj_name, **obj_data}

            # 2. –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
            for obj_name, obj_data in db.items():
                if (
                    "–æ–ø–∏—Å–∞–Ω–∏–µ" in obj_data
                    and obj_data["–æ–ø–∏—Å–∞–Ω–∏–µ"].lower() in normalized_query
                ):
                    if obj_name not in matches:
                        matches.append(obj_name)

            # 3. –ü–æ–∏—Å–∫ –ø–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º
            for obj_name, obj_data in db.items():
                if "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏" in obj_data:
                    for feature in obj_data["–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏"]:
                        if feature.lower() in normalized_query:
                            if obj_name not in matches:
                                matches.append(obj_name)

            # 4. –ü–æ–∏—Å–∫ –ø–æ –±–ª–∏–∂–∞–π—à–∏–º –æ–±—ä–µ–∫—Ç–∞–º
            for obj_name, obj_data in db.items():
                if "–±–ª–∏–∂–∞–π—à–∏–µ_–æ–±—ä–µ–∫—Ç—ã" in obj_data:
                    for nearby in obj_data["–±–ª–∏–∂–∞–π—à–∏–µ_–æ–±—ä–µ–∫—Ç—ã"]:
                        if nearby["–Ω–∞–∑–≤–∞–Ω–∏–µ"].lower() in normalized_query:
                            if obj_name not in matches:
                                matches.append(obj_name)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if matches:
                return {
                    "special_type": "auto_search",
                    "objects": list(set(matches)),  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                }

        logger.info(f"–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {user_query}")
        return None

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–∞: {e}")
        return None


def generate_all_objects_summary(db: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–∞–º"""
    summary = "===== –ö–†–ê–¢–ö–ò–ô –û–ë–ó–û–† –í–°–ï–• –û–ë–™–ï–ö–¢–û–í =====\n"
    for name, data in db.items():
        summary += f"‚Ä¢ {name}:\n"
        summary += f"  - –û–ø–∏—Å–∞–Ω–∏–µ: {data['–æ–ø–∏—Å–∞–Ω–∏–µ'][:70]}...\n"
        summary += f"  - –°—Ä–æ–∫ —Å–¥–∞—á–∏: {data['—Å—Ä–æ–∫_—Å–¥–∞—á–∏']}\n"
        if "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏" in data:
            summary += f"  - –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {', '.join(data['–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏'][:3])}\n"
        summary += "\n"
    return summary


def compare_complexes(complex_names: list, db: dict) -> str:
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∂–∏–ª—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        complex_names (list): –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –ñ–ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        db (dict): –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ñ–ö

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
    """
    try:
        if not complex_names:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ñ–ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."

        result = "üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ñ–ö:\n\n"
        found_any = False

        for name in complex_names:
            name = name.strip()
            if name in db:
                found_any = True
                data = db[name]
                result += f"üè¢ {name}:\n"
                result += f"  ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {data['–æ–ø–∏—Å–∞–Ω–∏–µ'][:100]}...\n"
                result += f"  ‚Ä¢ –≠—Ç–∞–∂–Ω–æ—Å—Ç—å: {data['—ç—Ç–∞–∂–Ω–æ—Å—Ç—å']}\n"
                result += f"  ‚Ä¢ –°—Ä–æ–∫ —Å–¥–∞—á–∏: {data['—Å—Ä–æ–∫_—Å–¥–∞—á–∏']}\n"

                if "–±–ª–∏–∂–∞–π—à–∏–µ_–æ–±—ä–µ–∫—Ç—ã" in data and data["–±–ª–∏–∂–∞–π—à–∏–µ_–æ–±—ä–µ–∫—Ç—ã"]:
                    nearby = ", ".join(
                        obj["–Ω–∞–∑–≤–∞–Ω–∏–µ"] for obj in data["–±–ª–∏–∂–∞–π—à–∏–µ_–æ–±—ä–µ–∫—Ç—ã"][:3]
                    )
                    result += f"  ‚Ä¢ –ë–ª–∏–∂–∞–π—à–∏–µ –æ–±—ä–µ–∫—Ç—ã: {nearby}\n"

                result += "\n"
            else:
                result += f"‚ö†Ô∏è –ñ–ö '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\n"

        if not found_any:
            return "–ù–∏ –æ–¥–∏–Ω –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ñ–ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è."

        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ñ–ö: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
